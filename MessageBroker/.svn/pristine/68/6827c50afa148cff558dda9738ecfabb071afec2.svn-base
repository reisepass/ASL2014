package edu.ethz.asl.user04.dbutils;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import edu.ethz.asl.user04.shared.entity.Message;

public class SQLUtil {
	protected Connection conn;
	ArrayList<String> colNames;
	public SQLUtil(Connection inpC){
		conn=inpC;
		colNames = new ArrayList<String>();
		colNames.add("messageid");
		colNames.add("senderid");
		colNames.add("receiverid");

		colNames.add("queueid");
		colNames.add("context");
		colNames.add("priority");
		colNames.add("message");
	}
	private Connection getDBConnection(){
		return conn;
	}
	
	
	public int sendSQL(String inpCommand) throws SQLException{
		int errorCode = 1;
		Statement statmt=null;
		Connection myconn = getDBConnection();
		boolean er =false;
		try{
			statmt=myconn.createStatement();
			er=statmt.execute(inpCommand);
		}
		catch(SQLException e){
			System.out.println(e.getMessage());
		}
		finally{
			if(statmt!=null)
				statmt.close();
			
		}
		return (er)?1:-1;
	}
	
	public ArrayList<ArrayList<String>> respondSQL(String inpCommand, ArrayList<String> requestedColumNames) throws SQLException{
		ArrayList<ArrayList<String>> responses = new ArrayList<ArrayList<String>>();
		Statement statmt=null;

		boolean er =false;
		try{
			statmt=getDBConnection().createStatement();
			ResultSet rs=statmt.executeQuery(inpCommand);
			
			while (rs.next()) {
				
				ArrayList<String> curStrings = new ArrayList<String>();
				for(String colName : requestedColumNames){
					curStrings.add(rs.getString(colName));
				
				}
				responses.add(curStrings);
			}
 
			
		}
		catch(SQLException e){
			System.out.println(e.getMessage());
		}
		finally{
			if(statmt!=null)
				statmt.close();
			
		}
		return responses;
	}
	
	

	
	//TODO check if client name is unique 
	public int CreateClient(int clientID, boolean isSender) throws SQLException{ //Returns client ID
		int clientType = (isSender)? 1:0;
		String makeClient = " INSERT INTO clients (clientid,clienttype) VALUES ("+clientID+","+clientType+");";
		
		return sendSQL(makeClient);
	}
	//returns queueID
	public int CreateQueue(String name){
		return -2; 
	}
	public boolean deleteQueue(String Name){
		return false; 
	}
	public boolean deteltQueue(int qID){
		return false; 
	}
	public ArrayList<Integer> listQueues(){
		return null; 
	}
	/**
	 * We assume MessageTexts dont have special characters that could mess up the query
	 * @param MsgText
	 * @param Sender
	 * @param Receiver
	 * @param Context
	 * @param prirority
	 * @param queueid
	 * @return
	 */
	public int addMessage( String MsgText, int Sender, int Receiver, int Context, int prirority, int queueid){
			String makeClient = " INSERT INTO messages (senderid,receiverid,queueid,context,priority,message) " +
										"VALUES ("+Sender+","+Receiver+","+queueid+","+Context+","+prirority+",'"+MsgText+"');";
		//TODO return messageID 
			int errCode =-1;
		  try {
			  errCode= sendSQL(makeClient);
		} catch (SQLException e) {
			System.err.println(e.getMessage());
			e.printStackTrace();
		}
		return errCode; 
	}
	
	private Message constMessage ( ArrayList<String> stdOutput){
	
		
		//messageid = 
		//TODO tell the DB to autoincremetn message id 
		int SendID = Integer.parseInt(stdOutput.get(1));
		int receiverid    = Integer.parseInt(stdOutput.get(2));
		int qid = Integer.parseInt(stdOutput.get(3));
		int context = Integer.parseInt(stdOutput.get(4));
		int pri   = Integer.parseInt(stdOutput.get(5));
		String mes = stdOutput.get(6);
		Message out = new Message (SendID,qid,mes);
		return out;
	}
	
	/**
	 * 
	 * @param QueueID
	 * @return
	 */
	public Message getQueue(int QueueID){  //TODO allow specification of sorting by time or priority
		ArrayList<Message> outMessages = new ArrayList<Message>();
		String getMessagesOfThisQueue = "SELECT * FROM messages WHERE queueid="+QueueID+"" +
				" ORDER BY priority;";
		Message out =null;
		
		try {
			ArrayList<ArrayList<String>> respo = respondSQL(getMessagesOfThisQueue,colNames);
			
			int a =0;
			out= constMessage(respo.get(0));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return out; 
	}
	public ArrayList<Message> getQueue(String QueueID){
		return null;
	}
	
	
}
