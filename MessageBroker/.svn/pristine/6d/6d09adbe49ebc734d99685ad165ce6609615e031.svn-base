package edu.ethz.asl.user04.messagebroker;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;

import edu.ethz.asl.user04.dbutils.DBManager;
import edu.ethz.asl.user04.dbutils.SQLUtil;
import edu.ethz.asl.user04.shared.entity.Message;
import edu.ethz.user04.shared.requests.messagerequests.DeleteMessageRequest;
import edu.ethz.user04.shared.requests.messagerequests.ReadMessageRequest;
import edu.ethz.user04.shared.requests.messagerequests.WriteMessageRequest;
import edu.ethz.user04.shared.requests.queuerequests.CreateQueueRequest;
import edu.ethz.user04.shared.requests.queuerequests.DeleteQueueRequest;
import edu.ethz.user04.shared.requests.queuerequests.ReadQueueRequest;

public class MessageHandler implements Runnable {
	
	private final Socket socket;
	DBManager dbC;
	Object messageObject;
	ObjectInputStream oi;
	
	ObjectOutputStream oo; 
	/**
	 * messageObject needs to be one object from the queue
	 * @param socket
	 * @param dbPool
	 */
	public MessageHandler(Socket socket,DBManager dbPool) {
		this.socket = socket;
		this.dbC = dbPool;
		 System.out.println("NewMessageHandler");
		
		
	}
	

	@Override
	public void run() {

		

		
		try {
			oi = new ObjectInputStream(socket.getInputStream());
			oo= new ObjectOutputStream(socket.getOutputStream());
			
			messageObject = oi.readObject();
			
			//System.out.println("Received message: "+ messageObject);
			Connection conn = dbC.newClientConnection();
			SQLUtil sqlutil = new SQLUtil(conn);

			// Things to do:
			// 1. Enqueue the message
			String queryStr ="";
			
			if (messageObject instanceof WriteMessageRequest) {
				WriteMessageRequest messageRequest = (WriteMessageRequest) messageObject;
				Message message = messageRequest.message;
				 ArrayList<Integer> result;
				if(message.getQueueIdList().size()>1){
					result = sqlutil.multiMessage(message.getPayload(), message.getSenderId(), message.getReceiverId(), message.getContext(), message.getPriority().getPriorityValue(), message.getQueueIdList());
				}
				else{
					//TODO makesure outside this that queuelsit always has atleast one elment
					sqlutil.addMessage(message.getPayload(), message.getSenderId(), message.getReceiverId(), message.getContext(), message.getPriority().getPriorityValue(),message.getQueueIdList().get(0));
				}
				try {
					sqlutil.sendSQL(queryStr);
				} catch (SQLException e) {
					System.out
							.println("Something went horribly wrong when trying to insert Message");
					e.printStackTrace();
				}
			}
			else if(messageObject instanceof Message){
				Message message = (Message)messageObject;
				
			
				ArrayList<Integer> result;
					if(message.getQueueIdList().size()>1){
						result = sqlutil.multiMessage(message.getPayload(), message.getSenderId(), message.getReceiverId(), message.getContext(), message.getPriority().getPriorityValue(), message.getQueueIdList());
					}
					else{
						//TODO makesure outside this that queuelsit always has atleast one elment
						sqlutil.addMessage(message.getPayload(), message.getSenderId(), message.getReceiverId(), message.getContext(), message.getPriority().getPriorityValue(),message.getQueueIdList().get(0));
					}
			}
			else if(messageObject instanceof DeleteMessageRequest){
				
			}
			else if(messageObject instanceof ReadMessageRequest){
				ReadMessageRequest mesgq = (ReadMessageRequest) messageObject;
				
			}
			else if(messageObject instanceof CreateQueueRequest){
				
			}
			else if(messageObject instanceof DeleteQueueRequest){
				DeleteQueueRequest mesgq = (DeleteQueueRequest)messageObject;
				boolean resp;
				try{
					resp=sqlutil.deleteQueue(mesgq.queueid);
				}
				catch(SQLException e){//TODO inform the client 
					System.err.println(e.getMessage());
					resp=false;
				}
				oo.writeBoolean(resp);
				
			}
			else if(messageObject instanceof ReadQueueRequest){
				ReadQueueRequest mesgq = (ReadQueueRequest)messageObject;
				Message sendBack;
				if(mesgq.orderByTime)
				{
					sendBack= sqlutil.getQueueClosestTime(mesgq.queueId,mesgq.removeAfter);
				}
				else{
					sendBack = sqlutil.getQueuePriorityFirst(mesgq.queueId,mesgq.removeAfter);
				}
				oo.writeObject(sendBack);
				
				
			}			
			else {
				System.out.println("Unable to detect instance of ObjectStream");
			}
			
			oi.close();
			oo.close();
			socket.close();
			
		} catch (IOException e) {
			//TODO do we need  to close the connection here ????
			e.printStackTrace();
		} catch (ClassNotFoundException e) {

			e.printStackTrace();
		}
		
	}

}
