package edu.ethz.asl.user04.messagebroker;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

import edu.ethz.asl.user04.dbutils.DBManager;
import edu.ethz.asl.user04.dbutils.SQLUtil_V2;
import edu.ethz.asl.user04.shared.entity.Message;
import edu.ethz.asl.user04.shared.entity.RequestResponse;
import edu.ethz.asl.user04.shared.logging.MessagingSystemLogger;
import edu.ethz.user04.shared.requests.messagerequests.DeleteMessageRequest;
import edu.ethz.user04.shared.requests.messagerequests.MessagingSystemRequest;
import edu.ethz.user04.shared.requests.messagerequests.WriteMessageRequest;
import edu.ethz.user04.shared.requests.queuerequests.CloseConnection;
import edu.ethz.user04.shared.requests.queuerequests.CreateQueueRequest;
import edu.ethz.user04.shared.requests.queuerequests.DeleteQueueRequest;
import edu.ethz.user04.shared.requests.queuerequests.QueryForQueuesWithMessagesForMe;
import edu.ethz.user04.shared.requests.queuerequests.ReadAllMessagesRequest;
import edu.ethz.user04.shared.requests.queuerequests.ReadPrivateMessageRequest;
import edu.ethz.user04.shared.requests.queuerequests.ReadQueueRequest;

public class MessageHandler implements Runnable {

	public final static Logger LOGGER = MessagingSystemLogger
			.getLoggerForClass(MessageHandler.class.getName());
	
	// OT - If this is enabled, the message handler keeps listening for objects.
	// Message Handler terminates only when it receives a CloseConnectionObject
	// Maybe read this from config? 
	private final static boolean BATCH_REQUESTS = false;

	private final Socket socket;
	DBManager dbC;
	Object messageObject;
	ObjectInputStream oi;
	boolean debugOn = true;
	int sleepBeforeConnectionRetry = 1000;
	int resultChunkSize = 50;
	ObjectOutputStream oo;
	private UUID lastReqIDServer;
	private Exception lastExceptionHandled;

	/**
	 * messageObject needs to be one object from the queue
	 * 
	 * @param socket
	 * @param dbPool
	 */
	public MessageHandler(Socket socket, DBManager dbPool) {
		this.socket = socket;
		this.dbC = dbPool;
		debugOn = false;

	}

	public MessageHandler(Socket socket, DBManager dbPool, boolean debugOn) {
		this.socket = socket;
		this.dbC = dbPool;
		this.debugOn = debugOn;

	}

	@Override
	public void run() {

		try {

			oi = new ObjectInputStream(socket.getInputStream());
			oo = new ObjectOutputStream(socket.getOutputStream());
			
			do {
				messageObject = oi.readObject();

				MessagingSystemRequest msr = (MessagingSystemRequest) messageObject;
				LOGGER.info("Received request with ID " + msr.getRequestUUID());
				lastReqIDServer=msr.getRequestUUID();
				LOGGER.info(String
						.format("[METRIC] type=request request_type=MessageRequest request_id=%s tier=middleware tag=received_request", msr.getRequestUUID()));
			
				int timesTried = 1;
				Connection conn = dbC.newClientConnection();

				if (conn == null) {
					LOGGER.severe("Failed to get DB connection");
					while (timesTried < 15 && conn == null) {
						try {
							timesTried++;
							Thread.sleep(sleepBeforeConnectionRetry);
							conn = dbC.newClientConnection();
						} catch (InterruptedException e) {
							System.err.println("CantSleep " + e.getMessage());
							e.printStackTrace();
						}
					}
					if (conn == null)
						throw new EmptyStackException();
				}

				SQLUtil_V2 sqlutil = new SQLUtil_V2(conn, resultChunkSize);

				// TODO return the id of the message you just wrote back to
				// client
				//
				// Write Message Request
				//
				if (messageObject instanceof WriteMessageRequest) {
					LOGGER.log(
							Level.INFO,
							"[DEBUG] WriteMessageRequest "
									+ msr.getRequestUUID());

					WriteMessageRequest messageRequest = (WriteMessageRequest) messageObject;
					Message message = messageRequest.message;
					ArrayList<Integer> result;
					boolean success = true;
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=request request_type=WriteMessageRequest request_id=%s tier=middleware tag=sending_request_from_server_to_database client_id=%d",
									messageRequest.getRequestUUID(), messageRequest.message.getSenderId()));
					
					if (message.getQueueIdList().size() > 1) {
						result = sqlutil.multiMessage(message.getPayload(),
								message.getSenderId(), message.getReceiverId(),
								message.getContext(), message.getPriority(),
								message.getQueueIdList());
						
						LOGGER.log(
								Level.INFO,
								String.format(
										"[METRIC] type=response request_type=WriteMessageRequest request_id=%s tier=middleware tag=received_response_at_server_from_database client_id=%d",
										messageRequest.getRequestUUID(), messageRequest.message.getSenderId()));
						
						for (Integer res : result) {
							if (res == -1) {
								success = false;
								break;
							}
						}

					} else {
						// TODO makesure outside this that queuelsit always has
						// atleast one elmentgetQueuesWithRelevantMessages
						int resultSingle = sqlutil
								.addMessage(message.getPayload(), message
										.getSenderId(),
										message.getReceiverId(), message
												.getContext(), message
												.getPriority(), message
												.getQueueIdList().get(0));
						LOGGER.log(
								Level.INFO,
								String.format(
										"[METRIC] type=response request_type=WriteMessageRequest request_id=%s tier=middleware tag=received_response_at_server_from_database client_id=%d",
										messageRequest.getRequestUUID(), messageRequest.message.getSenderId()));
						success = resultSingle != -1;
					}
					

					oo.writeObject(new RequestResponse(success, msr
							.getRequestUUID()));
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=WriteMessageRequest request_id=%s tier=middleware tag=sent_response_from_server_to_api client_id=%d",
									messageRequest.getRequestUUID(), messageRequest.message.getSenderId()));

				} 
				//
				// Delete Message Request
				//
				else if (messageObject instanceof DeleteMessageRequest) {
					DeleteMessageRequest deleteMessageRequest = (DeleteMessageRequest) messageObject;
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=request request_type=DeleteMessageRequest request_id=%s tier=middleware tag=sending_request_from_server_to_database client_id=%d",
									deleteMessageRequest.getRequestUUID(), deleteMessageRequest.clientid));
					
					boolean responseVal = false;
					try {
						responseVal = sqlutil.deleteMessage(deleteMessageRequest.messageid);
					} catch (SQLException e) {
						LOGGER.log(Level.SEVERE, "Encountered SQLException for request " + deleteMessageRequest.getRequestUUID(), e);
					}
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=DeleteMessageRequest request_id=%s tier=middleware tag=received_response_at_server_from_database client_id=%d",
									deleteMessageRequest.getRequestUUID(), deleteMessageRequest.clientid));

					oo.writeObject(new RequestResponse(responseVal));
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=DeleteMessageRequest request_id=%s tier=middleware tag=sent_response_from_server_to_api client_id=%d",
									deleteMessageRequest.getRequestUUID(), deleteMessageRequest.clientid));
				}
				//
				// Create Queue Request
				//
				else if (messageObject instanceof CreateQueueRequest) {
					CreateQueueRequest createQueueRequest = (CreateQueueRequest) messageObject;
					boolean recVal = false;

					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=request request_type=CreateQueueRequest request_id=%s tier=middleware tag=sending_request_from_server_to_database client_id=%d",
									createQueueRequest.getRequestUUID(), createQueueRequest.clientid));
					try {
						recVal = sqlutil.CreateQueue(createQueueRequest.queueid,
								createQueueRequest.clientid, createQueueRequest.queueName);
					} catch (SQLException e) {
						LOGGER.log(Level.SEVERE, "Encountered SQLException for request " + createQueueRequest.getRequestUUID(), e);
					}
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=CreateQueueRequest request_id=%s tier=middleware tag=received_response_at_server_from_database client_id=%d",
									createQueueRequest.getRequestUUID(), createQueueRequest.clientid));

					oo.writeObject(new RequestResponse(recVal));
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=CreateQueueRequest request_id=%s tier=middleware tag=sent_response_from_server_to_api",
									createQueueRequest.getRequestUUID()));

				}
				//
				// Delete Queue Request
				//
				else if (messageObject instanceof DeleteQueueRequest) {
					DeleteQueueRequest deleteQueueRequest = (DeleteQueueRequest) messageObject;
					boolean resp;
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=request request_type=DeleteQueueRequest request_id=%s tier=middleware tag=sending_request_from_server_to_database",
									deleteQueueRequest.getRequestUUID()));
					
					try {
						resp = sqlutil.deleteQueue(deleteQueueRequest.queueid);
					} catch (SQLException e) {// TODO inform the client
						LOGGER.log(Level.SEVERE, "Encountered SQLException for request " + deleteQueueRequest.getRequestUUID(), e);
						resp = false;
					}
					

					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=DeleteQueueRequest request_id=%s tier=middleware tag=received_response_at_server_from_database",
									deleteQueueRequest.getRequestUUID()));

					oo.writeObject(new Boolean(resp));
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=DeleteQueueRequest request_id=%s tier=middleware tag=sent_response_from_server_to_api client_id=%d",
									deleteQueueRequest.getRequestUUID()));

				}
				//
				// QueryForQueuesWithMessagesForMe
				//
				else if (messageObject instanceof QueryForQueuesWithMessagesForMe) {
					
					QueryForQueuesWithMessagesForMe queryRequest = (QueryForQueuesWithMessagesForMe) messageObject;
					int receiverId = queryRequest.receiverId;
					ArrayList<Integer> resp;
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=request request_type=QueryForQueuesWithMessagesForMe request_id=%s tier=middleware tag=sending_request_from_server_to_database client_id=%d",
									queryRequest.getRequestUUID(), queryRequest.receiverId));
					
					try {
						resp = sqlutil
								.getQueuesWithRelevantMessages(receiverId);
					} catch (SQLException e) {
						LOGGER.log(Level.SEVERE, "Encountered SQLException for request " + queryRequest.getRequestUUID(), e);
						resp = null;
					}
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=QueryForQueuesWithMessagesForMe request_id=%s tier=middleware tag=received_response_at_server_from_database client_id=%d",
									queryRequest.getRequestUUID(), queryRequest.receiverId));
					
					// it was initially resp.size()!=0; but a resp of size 0 means that user simply has no messages 
					oo.writeObject(new RequestResponse(resp!=null,
							(Object) resp));
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=QueryForQueuesWithMessagesForMe request_id=%s tier=middleware tag=sent_response_from_server_to_api client_id=%d",
									queryRequest.getRequestUUID(), queryRequest.receiverId));
					
				}
				//
				// Read Queue Request
				//
				else if (messageObject instanceof ReadQueueRequest) {
					ReadQueueRequest mesgq = (ReadQueueRequest) messageObject;
					Message sendBack = null;
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=request request_type=ReadQueueRequest request_id=%s tier=middleware tag=sending_request_from_server_to_database",
									mesgq.getRequestUUID()));
					
					if (mesgq.orderByTime) {
						sendBack = sqlutil.getQueueClosestTime(mesgq.queueId,
								mesgq.removeAfter);
					} else {
						sendBack = sqlutil.getQueuePriorityFirst(mesgq.queueId,
								mesgq.removeAfter);
					}
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=ReadQueueRequest request_id=%s tier=middleware tag=received_response_at_server_from_database client_id",
									mesgq.getRequestUUID()));
					
					oo.writeObject(sendBack);
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=ReadQueueRequest request_id=%s tier=middleware tag=sent_response_from_server_to_api client_id",
									mesgq.getRequestUUID()));

				}
				//
				// Close Connection
				//
				else if (messageObject instanceof CloseConnection) {
					if (debugOn)
						System.out.print("<CloseConnection>");
					
					LOGGER.severe("CloseConnection should not exist");
					
					sqlutil.closeSQLconnection();
					oi.close();
					oo.close();
					socket.close();

				}
				//
				// Read Private Message Request
				//
				// AMR: id ReadPrivateMessageRequest has getBraodCast = false
				// call the method getPrivateMessageNotBroadcast in the SQLUtil class
				// which basically ignores the broadcast messages
				// as responses are always directed to the senders and not broadcasts
				else if (messageObject instanceof ReadPrivateMessageRequest) {
					if (debugOn)
						System.out.print("<ReadPrivateMessageRequest>");
					ReadPrivateMessageRequest mesgq = (ReadPrivateMessageRequest) messageObject;
					Message sendBack;

					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=request request_type=ReadPrivateMessageRequest request_id=%s tier=middleware tag=sending_request_from_server_to_database client_id=%d",
									mesgq.getRequestUUID(), mesgq.receiverID));
					
					if(mesgq.getBraodcast){
						sendBack = sqlutil.getPrivateMessage(-1, mesgq.receiverID,
								mesgq.queueID, mesgq.removeAfterPeek, mesgq.orderByTime, mesgq.getContext());
					}
					else {
												
						sendBack = sqlutil.getPrivateMessageNotBroadcast(-1, mesgq.receiverID, mesgq.queueID, mesgq.removeAfterPeek, mesgq.orderByTime, mesgq.getContext());
					}
					
					
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=ReadPrivateMessageRequest request_id=%s tier=middleware tag=received_response_at_server_from_database client_id=%d",
									mesgq.getRequestUUID(), mesgq.receiverID));

					oo.writeObject(sendBack);
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=ReadPrivateMessageRequest request_id=%s tier=middleware tag=sent_response_from_server_to_api client_id=%d",
									mesgq.getRequestUUID(), mesgq.receiverID));

				}
				//
				// Read All Messages Request
				//
				else if (messageObject instanceof ReadAllMessagesRequest) {
					if (debugOn)
						System.out.print("<ReadAllMessagesRequest>");
					ReadAllMessagesRequest param = (ReadAllMessagesRequest) messageObject;
					List<Message> result = null;
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=request request_type=ReadAllMessagesRequest request_id=%s tier=middleware tag=sending_request_from_server_to_database client_id=%d",
									param.getRequestUUID(), param.receiverID));
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=ReadAllMessagesRequest request_id=%s tier=middleware tag=received_response_at_server_from_database client_id=%d",
									param.getRequestUUID(), param.receiverID));
					
					try {
						result = sqlutil.getAllPrivateMessages(param.queueID,
								param.removeAfterPeek, param.orderByTime,
								param.receiverID, param.page);
					} catch (SQLException e) {
						LOGGER.log(Level.SEVERE, "Encountered SQLException for request " + param.getRequestUUID(), e);
					}
					
					oo.writeObject(result);
					
					LOGGER.log(
							Level.INFO,
							String.format(
									"[METRIC] type=response request_type=ReadAllMessagesRequest request_id=%s tier=middleware tag=sent_response_from_server_to_api client_id=%d",
									param.getRequestUUID(), param.receiverID));

				}

				else {
					System.out.println("Unable to detect MEssage Type Sent");
					sqlutil.closeSQLconnection();
					oi.close();
					oo.close();
					socket.close();
				}

				sqlutil.closeSQLconnection();

				try {
					if (!conn.isClosed())
						conn.close();

				} catch (SQLException e) {
					lastExceptionHandled=e;
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				LOGGER.info(String
						.format("[METRIC] type=response request_type=MessageRequest request_id=%s tier=middleware tag=completed_request", msr.getRequestUUID()));
				
			} while(BATCH_REQUESTS);
		} catch (IOException e) { // Send message back to client to resent
									// Package // if thats the problem
			lastExceptionHandled=e;
			LOGGER.severe(String
					.format("[SUPERBUG] type=error request_type=IOException tier=middleware tag=failedToGetReadObjectCorreclty exceptionPrint='%s'",e.getMessage()
								));
	
			System.err.println("ERR186" + e.getMessage());
			// TODO before exiting send an Error back to the client so he knows
			// to stop listening before it closes
			e.printStackTrace();

			try {
				
				oi.close();
				oo.close();
				if(!socket.isClosed()){
				socket.close();
				}

			} catch (IOException e1) {
				lastExceptionHandled=e1;
				e1.printStackTrace();
				LOGGER.warning(String
						.format("[WARNING] type=warning request_type=ConnectionCloseProblem tier=middleware tag=ConnectionCloseProblem  exceptionPrint='%s'",e1.getMessage()));
				
			}

		} catch (ClassNotFoundException e) {
			lastExceptionHandled=e;
			System.err.println("ERR188" + e.getMessage());
			LOGGER.severe(String
					.format("[SUPERBUG] type=error request_type=ClassNotFoundException tier=middleware tag=ClassNotFoundException, exceptionPrint='%s'"
								,e.getMessage()));
			e.printStackTrace();
		}

		if(!socket.isClosed()){
			
			String reqID;
			String lastE;
			if(lastExceptionHandled!=null){
				lastE=lastExceptionHandled.getMessage();
			}
			else{
				lastE = "no_exption_saved";
			}
			if(lastReqIDServer!=null){
				reqID=lastReqIDServer.toString();
			}
			else{
				reqID="no_id_saved";
			}
			LOGGER.warning(String
					.format("[SUPERBUG] type=error request_type=ConnectionCloseProblem tier=middleware tag=ConnectionCloseProblem  recent_exception=%s request_id=%s exceptionPrint= Finished_Runnable_without_closing_socket",lastE,reqID));
			try {
				socket.close();
			} catch (IOException e) {
				e.printStackTrace();
				LOGGER.warning(String
						.format("[WARNING] type=warning request_type=ConnectionCloseProblem tier=middleware tag=ConnectionCloseProblem request_id=%s exceptionPrint=This is Try 2 '%s'",reqID,e.getMessage()));
				
				
			}
		}
	
		
	}

}
