package edu.ethz.asl.user04.OTwantsProcessesSoHereYouGoOOOO;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import edu.ethz.asl.user04.clientAPI.MessageAPI;
import edu.ethz.asl.user04.messagebroker.MessageBrokerService;
import edu.ethz.asl.user04.shared.entity.Message;
import edu.ethz.asl.user04.shared.logging.MessagingSystemLogger;
import edu.ethz.user04.shared.requests.messagerequests.WriteMessageRequest;
import edu.ethz.user04.shared.requests.queuerequests.CreateQueueRequest;
import edu.ethz.user04.shared.requests.queuerequests.ReadPrivateMessageRequest;



public class TraceRequestResponse_Pairs {
	
	public final static Logger LOGGER = MessagingSystemLogger
			.getLoggerForClass(ProcRequestResponseFinalJar.class.getName());
	
	int clientId;
	int experimentLength;
	int messageLength;
	String message;
	Properties client_properties;
	MessageAPI mapi;
	static BufferedWriter writer;
	boolean isSender;
	
	public TraceRequestResponse_Pairs (int clientId, int experimentLength, int  messageLength, Properties client_properties, MessageAPI mapi, boolean isSender){
		this.clientId = clientId;
		this.experimentLength = experimentLength;
		this.messageLength = messageLength;
		char[] messageText = new char[messageLength];
		for(int i =0; i<messageText.length; i++){
			messageText[i] = (char)((int)(Math.random()*26)+'a');
		}
		message = new String (messageText);
		this.client_properties = client_properties;
		this.mapi = mapi;
		this.isSender = isSender;
	}
	
	
	public void runSender(){
		LOGGER.info("[DEBUG] Starting Client " + clientId);
		// queues start from [1, num_queues]
		int num_queues = Integer.parseInt(client_properties.getProperty("num_queues"));
		int num_senders = Integer.parseInt(client_properties.getProperty("num_request_response_pairs")) /2;
		
		long startTime = System.currentTimeMillis();
		long endTime = startTime + experimentLength*1000 *60;
		int receiverId = clientId + num_senders;
		
		while(System.currentTimeMillis()<endTime){
			int queue = (int)(Math.random()*num_queues) +1;
		
			// // sender, queue, priority, payload, reveiverId, context
			
			Message requestMessage = new  Message(this.clientId, queue, 10, this.message,  receiverId, 100);
			WriteMessageRequest writeReq2 = new WriteMessageRequest(requestMessage);
			
			
			LOGGER.log(
					Level.INFO,
					String.format(
							"[METRIC] type=request request_type=RequestResponseMessage request_id=%s tier=client tag=sending_request_from_client_to_api client_id=%d",
							writeReq2.getRequestUUID(), clientId));
			Message result = mapi.sendRequestResponseMessage(writeReq2, 1000);  // timeout is one second
			
			
			///////// LOCAL HOST TESTINGG
			/*try{
				writer.write("client "+clientId + " sent request to "+ receiverId+"\n");
				writer.write("result: "+result+"\n");
			}
			catch (Exception e){
				
			}*/
			///////// LOCAL HOST TESTINGG
			
			
			if(result!=null){
				LOGGER.log(
						Level.INFO,
						String.format(
								"[METRIC] type=response request_type=RequestResponseMessage request_id=%s tier=client result=PASS messageBack=%s tag=received_response_at_client_from_api client_id=%d",
								writeReq2.getRequestUUID(), result.getPayload(), 
								clientId));
				//writer.write("client "+ clientId + " received response " + receiverId +" payloaaad: "+result.getPayload()+"\n");
				//System.out.println("payloaaad: "+result.getPayload());
			}
			else{
				LOGGER.log(
						Level.INFO,
						String.format(
								"[METRIC] type=response request_type=RequestResponseMessage request_id=%s tier=client result=FAIL messageBack=NothingFoundORFail tag=received_response_at_client_from_api client_id=%d",
								writeReq2.getRequestUUID(), clientId));

			}
		}
		
		
		LOGGER.info("[DEBUG] Terminating Client " + clientId);
	}
	
	
	
	public void runReceiver(){
		LOGGER.info("[DEBUG] Starting Client " + clientId);
		long start = System.currentTimeMillis();
		long end = start+experimentLength * 1000 *60 + 10 ;
		// receiver has to run some more time than the sender
		
		while(System.currentTimeMillis()<end){
			// senderID, queueID, removeAfterPeek, orderByTime
			ReadPrivateMessageRequest readRequest = new ReadPrivateMessageRequest(-1, -1, true, false);
			// read message from any queue, from any sender, if its conetxt is not 0, reply to it
			
			LOGGER.log(
					Level.INFO,
					String.format(
							"[METRIC] type=request request_type=ReadPrivateMessageRequest request_id=%s tier=client tag=sending_request_from_client_to_api client_id=%d",
							readRequest.getRequestUUID(), clientId));
			Message requestForResponse = mapi.readOnePrivateMessage(readRequest);
			if(requestForResponse!=null){
				
				LOGGER.log(
						Level.INFO,
						String.format(
								"[METRIC] type=response request_type=ReadPrivateMessageRequest request_id=%s tier=client result=PASS messageBack=%s tag=received_response_at_client_from_api client_id=%d",
								readRequest.getRequestUUID(), requestForResponse.getPayload(),
								clientId));
				
				int requestSenderId = requestForResponse.senderId;
				int queueId = requestForResponse.getQueueIdList().get(0);
				Message response = new Message(this.clientId, queueId , 10, message , requestSenderId , 100);
				WriteMessageRequest responseRequest = new WriteMessageRequest(response);
				mapi.sendMessage(responseRequest);
			}
			else{
				LOGGER.log(
						Level.INFO,
						String.format(
								"[METRIC] type=response request_type=ReadPrivateMessageRequest request_id=%s tier=client result=FAIL messageBack=NothingFoundORFail tag=received_response_at_client_from_api client_id=%d",
								readRequest.getRequestUUID(), clientId));
			}
		}
		LOGGER.info("[DEBUG] Terminating Client " + clientId);
	}
	
	
	// startIndex = pairs clients is 3500
	//example arguments
	// --clientID 3500 --experlength 1 --meslength 10
	// --clientID 3501 --experlength 1 --meslength 10
	// --clientID 3502 --experlength 1 --meslength 10
	// --clientID 3503 --experlength 1 --meslength 10
	
	
	public static void main(String[]args){
		
		Properties client_prop = new Properties();
		try {
			client_prop.load(new FileInputStream("properties/client.properties"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String brokerServiceURL = client_prop.getProperty("mw_url");
		int brokerServicePort = Integer.parseInt(client_prop
				.getProperty("mw_port"));
		
		
		int clientId = -1;
		int experimentLength = -1;
		int messageLength = -1;
		
		for (int i = 0; i < args.length - 1; i++) {
			if (args[i].equals("--clientID"))
				clientId = Integer.parseInt(args[i + 1]);
			if (args[i].equals("--experlength"))
				experimentLength = Integer.parseInt(args[i + 1]);
			if (args[i].equals("--meslength"))
				messageLength = Integer.parseInt(args[i + 1]);

		}
		
		
		try {
			MessageAPI mapi = new MessageAPI(clientId, brokerServiceURL,
					brokerServicePort);
			
			int num_request_response_pairs = Integer.parseInt(client_prop.getProperty("num_request_response_pairs"));
			int start_idx_request_response_pairs = Integer.parseInt(client_prop.getProperty("start_idx_request_response_pairs"));
			int end_idx_request_response_pairs = start_idx_request_response_pairs + num_request_response_pairs - 1;
			// 0 - 99
			// (0 +99)/2  = 44
			// 0 - 44 senders
			// 45 - 99 receivers
			int lastSender = (start_idx_request_response_pairs + end_idx_request_response_pairs )/2;
			boolean isSender;
			if(clientId<=lastSender){
				isSender = true;
			}
			else {
				isSender = false;
			}
			
			TraceRequestResponse_Pairs clientProcess = new TraceRequestResponse_Pairs(clientId,experimentLength, messageLength, client_prop, mapi, isSender);
			if(isSender){
				

				////////LOCAL HOST TESTINGGG
				/*File file = new File("output-"+ clientId +".txt");
					try{
						writer = new BufferedWriter(new FileWriter(file));
					}
					catch (Exception e){
					
					}
				*/
				////////LOCAL HOST TESTINGGG
				
				
				
				
					clientProcess.runSender();
				
					
			////////LOCAL HOST TESTINGGG
			//writer.close();
			////////LOCAL HOST TESTINGGG
				
				
				
			}
			else{
				clientProcess.runReceiver();
			}
			
			
			
			
			
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
	}

}
