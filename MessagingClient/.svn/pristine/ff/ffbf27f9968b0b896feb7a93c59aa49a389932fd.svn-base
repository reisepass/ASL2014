package edu.ethz.asl.user04.OTwantsProcessesSoHereYouGoOOOO;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.Serializable;
import java.net.UnknownHostException;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

import edu.ethz.asl.user04.clientAPI.MessageAPI;
import edu.ethz.asl.user04.shared.logging.MessagingSystemLogger;
import edu.ethz.user04.shared.requests.messagerequests.WriteMessageRequest;

/**
 * Command Line Arguments needed: --clientID (int) --experlength (long)
 * --meslength (int)
 * 
 * @author mort
 * 
 */
public class ProcSendMessage implements Serializable {

	public final static Logger LOGGER = MessagingSystemLogger
			.getLoggerForClass(ProcSendMessage.class.getName());
	/**
	 * 
	 */
	private static final long serialVersionUID = -3865861447843334409L;
	int clientID;
	String message;
	MessageAPI capi;
	int mesLength;
	// int queueID;
	long experimentDur;
	Properties cProp;
	long expStartTime;
	int numberQueues;
	int numberReceivers;
	int startIndexReciever;
	static Random rand  = new Random();
	public static Integer getRandomInt(int max) {
		return rand.nextInt(max)+1;
		
	}
	
	public static Integer getRandomInt() { return getRandomInt(100); }

	private void init() {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < mesLength; i++) {
			sb.append(new Double(Math.random() * 100).intValue() % 10);
		}
		message = sb.toString();
		expStartTime = System.currentTimeMillis();
		numberQueues = Integer.parseInt(cProp.getProperty("num_queues"));
		int peekNum = Integer.parseInt(cProp.getProperty("num_readone_peek"));
		int pullNum = Integer.parseInt(cProp.getProperty("num_readone_pop"));
		int sendNum = Integer.parseInt(cProp.getProperty("num_sender"));
		numberReceivers = peekNum + pullNum;
		
		if (numberReceivers == 0) {
			// If there are no receiver jars, let the senders send messages among themselves
			numberReceivers = sendNum;
			startIndexReciever = Integer.parseInt(cProp
					.getProperty("start_idx_sender"));
		} else {
			startIndexReciever = Integer.parseInt(cProp
					.getProperty("start_idx_readers"));
		}
	}

	public ProcSendMessage(int clientID, MessageAPI capi, int mesLength,
			long experimentDur, Properties cProp) {
		super();
		this.clientID = clientID;
		this.capi = capi;
		this.mesLength = mesLength;
		this.experimentDur = experimentDur;
		this.cProp = cProp;

		init();
	}

	public void run() {
		
		WriteMessageRequest wmr;
		boolean result;

		expStartTime = System.currentTimeMillis();
		long expEndTime = expStartTime + experimentDur*60*1000;
		
		LOGGER.info(String.format("Client %d starting", this.clientID));
		
		while (System.currentTimeMillis() < expEndTime) {
			
			wmr = new WriteMessageRequest(getRandomInt(numberQueues), message, startIndexReciever+rand.nextInt(numberReceivers));

			LOGGER.log(
					Level.INFO,
					String.format(
							"[METRIC] type=request request_type=WriteMessageRequest request_id=%s tier=client tag=sending_request_from_client_to_api client_id=%d",
							wmr.getRequestUUID(), this.clientID));
			
			result = capi.sendMessage(wmr);

			LOGGER.log(
					Level.INFO,
					String.format(
							"[METRIC] type=response request_type=WriteMessageRequest request_id=%s tier=client result=%s tag=received_response_at_client_from_api client_id=%d",
							wmr.getRequestUUID(), (result ? "PASS"
									: "FAIL"), this.clientID));
		}
		
		LOGGER.info(String.format("Client %d terminating", this.clientID));
	}

	public static void main(String[] args) throws UnknownHostException,
			IOException {
		if (args == null || args.length < 2)
			System.exit(1);
		else {
			int ci = -1;
			long exp = -1;
			int q = -1;
			int ml = -1;
			for (int i = 0; i < args.length - 1; i++) {
				if (args[i].equals("--clientID"))
					ci = Integer.parseInt(args[i + 1]);
				if (args[i].equals("--experlength"))
					exp = Long.parseLong(args[i + 1]);
				if (args[i].equals("--QueueID")) {
					q = Integer.parseInt(args[i + 1]);
				}
				if (args[i].equals("--meslength"))
					ml = Integer.parseInt(args[i + 1]);

			}
			if (ci == -1 || exp == -1 || ml == -1) {
				System.err.println(String.format("&^33 Args Missing - %d %d %d", ci, exp, ml));
				System.exit(1);
			}

			Properties client_prop = new Properties();
			client_prop
					.load(new FileInputStream("properties/client.properties"));
			String brokerServiceURL = client_prop.getProperty("mw_url");
			int brokerServicePort = Integer.parseInt(client_prop
					.getProperty("mw_port"));

			MessageAPI mapi = new MessageAPI(ci, brokerServiceURL,
					brokerServicePort);

			ProcSendMessage start = new ProcSendMessage(ci, mapi, ml, exp,
					client_prop);
			start.run();
		}
	}

}
